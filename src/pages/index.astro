---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import Icon from "astro-icon";
import Avatar from "../components/Avatar.astro";
import Layout from "../layouts/Layout.astro";

// Page metadata
export const name = "Michael Eduave";
export const description = "Software Engineer";
export const prerender = true;

// Import all project logos
const logoImports = import.meta.glob<{ default: ImageMetadata }>(
  "../assets/projects/*.{svg,png}",
  {
    eager: true,
  }
);

// Projects data
const projects = [
  {
    name: "Pearl Chat",
    description: "AI-native assistant (chat and voice) that manages daily life logistics, with personas for tasks including event scheduling, pantry management, and personal finance. Aimed to support individuals and groups.",
    logo: {
      light: "pearl.svg",
      dark: "pearl.svg"
    },
    screenshot: null,
    url: "https://chat.meduave.com",
    github: "https://github.com/michaeljohneduave/hugin",
    show: true
  },
  {
    name: "Auto Apply",
    description: "Helps streamline job applications by automating the resume adjustment and thoughtfully filling up the application form by using the user’s provided context and static information.",
    github: "https://github.com/michaeljohneduave/auto-applai",
    logo: {
      light: "auto-apply-light.svg",
      dark: "auto-apply-dark.svg",
      height: 72,
      width: 72
    },
    show: true,
  },
  {
    name: "Rankfolio",
    description: "Automated portfolio analyzer using Puppeteer and Lighthouse for performance auditing.",
    logo: {
      light: "rankfolio.svg",
      dark: "rankfolio.svg"
    },
    github: "https://github.com/michaeljohneduave/rankfolio",
    show: true
  },
  {
    name: "Streaks",
    description: "NextJS habit tracking app with Planetscale database and Vercel deployment.",
    logo: {
      light: "streaks-light.svg",
      dark: "streaks-dark.svg"
    },
    github: "https://github.com/michaeljohneduave/streaks",
    show: true
  },
].filter(p => p.show);

// Work experiences
const workExperiences = [
{
    name: "Euclidean",
    role: "Full Stack Developer",
    description: "Building a web dashboard for the I Am Hope foundation.",
    year: "Present",
    show: true
  },
  {
    name: "Specter",
    role: "Data Engineer",
    description: "Alternative data company supplying valuable insights to VC funds.",
    year: "2020 - 2023",
    show: true
  },
  {
    name: "Micab",
    role: "Lead Software Engineer",
    description: "Led a team of 5 to help build and scale a ride-hailing platform",
    logo: {
      light: "micab.png",
      dark: "micab.png"
    },
    year: "2019 - 2020",
    show: true
  },
  {
    name: "Micab",
    role: "Software Engineer",
    description: "Worked on a dashboard for a ride-hailing platform for the Philippine taxi industry.",
    year: "2016 - 2019",
    show: true
  }
];
---
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const ofLink = document.querySelector("#of-link");
    if (ofLink) {
      ofLink.addEventListener("click", (e) => {
        e.preventDefault();
        window.open("/of", "_blank");
      });
    }
  });
</script>
<Layout>
  <div class=" font-sans transition-colors duration-300">
    <main class="">
      <!-- Intro Section -->
      <section class="mb-8">
        <div class="flex flex-col items-center gap-3 md:flex-row md:items-start md:gap-5">
          <Avatar />
          <!-- Text Content -->
          <div class="text-center md:text-left">
            <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Michael Eduave</h1>
            <p class="mt-1 text-xs text-gray-600 dark:text-gray-300">
              Currently working on projects using TypeScript, React, AWS, and exploring GenAI applications.
            </p>
            <p class="flex gap-1.5 justify-center md:justify-start mt-1.5 text-xs text-gray-500 dark:text-gray-400">
              <a target="_blank" href="https://linkedin.com/in/meduave" aria-label="LinkedIn link">LinkedIn</a> | 
              <a target="_blank" href="/cv.pdf" aria-label="CV link">Resumé</a> | 
              <a id="of-link" href="https://onlyfans.com/meduave" aria-label="OF link">OnlyFans</a> | 
              <a target="_blank" href="https://github.com/michaeljohneduave" aria-label="Github link">GitHub</a>
            </p>
          </div>
        </div>
      </section>

      <!-- Project Section -->
      <section class="mb-8">
        <h2 class="mb-3 text-xl font-medium text-gray-800 dark:text-gray-200">Projects</h2>
        <div>
          {projects.map(({ name, logo, description, url, github}) => {
            // Handle both string and object logo formats for backward compatibility
            const lightLogo = typeof logo === "string" ? logo : logo?.light;
            const darkLogo = typeof logo === "string" ? logo : logo?.dark;

            const lightLogoPath = lightLogo
              ? `../assets/projects/${lightLogo}`
              : null;
            const darkLogoPath = darkLogo
              ? `../assets/projects/${darkLogo}`
              : null;

            const lightLogoImage = lightLogoPath
              ? logoImports[lightLogoPath]?.default
              : null;
            const darkLogoImage = darkLogoPath
              ? logoImports[darkLogoPath]?.default
              : null;

            return (
              <div class="flex gap-3 md:items-start md:gap-4 rounded-md p-2.5">
                {/* Logo */}
                <div class="flex h-20 w-20 flex-shrink-0 items-center justify-center rounded-lg dark:bg-gray-800 bg-gray-50 relative">
                  <a href={url} target="_blank" rel="noopener noreferrer" aria-label={`Project link to ${name}`}>
                    {lightLogoImage && (
                      <Image
                        class="border-0 object-contain block dark:hidden"
                        height={logo?.height || 64}
                        width={logo?.width || 64}
                      src={lightLogoImage}
                      alt={`${name} logo (light mode)`}
                    />
                  )}
                  {darkLogoImage ? (
                    <Image
                      class="border-0 object-contain hidden dark:block"
                      height={logo?.height || 64}
                      width={logo?.width || 64}
                      src={darkLogoImage}
                      alt={`${name} logo (dark mode)`}
                    />
                  ) : (
                    lightLogoImage && (
                      // Fallback to light logo if dark logo is missing
                      <Image
                        class="border-0 object-contain hidden dark:block"
                        height="128"
                        width="128"
                        src={lightLogoImage}
                        alt={`${name} logo (fallback)`}
                      />
                    )
                  )}
                  </a>
                </div>
                {/* Text Content */}
                <div class="text-left">
                  <a target="_blank" href={url} aria-label={`Project link to ${name}`}>
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-200">{name}</h3>
                  <p class="mt-0.5 text-xs text-gray-600 dark:text-gray-300">
                    {description}
                  </p>
                  <p class="text-xs mt-1">
                    {github && (
                      <a class="flex gap-1 text-gray-500 dark:text-gray-400" target="_blank" href={github} aria-label={`GitHub link to ${name}`}>
                        Github <Icon name="mdi:external-link" class="text-gray-500 dark:text-gray-400 h-4 w-4 self-center" />
                      </a>
                    )}
                  </p>
                  </a>
                </div>
              </div>
            );
          })}
        </div>
      </section>

      <!-- Work Section -->
      <section>
        <h2 class="mb-3 text-xl font-medium text-gray-800 dark:text-gray-100">Work Experience</h2>
        <div>
          {workExperiences.map((work) => (
            <div class="flex gap-3 md:items-start md:gap-4 rounded-md p-2.5">
              <!-- Logo -->
              {/* <div class="flex h-20 w-20 flex-shrink-0 items-center justify-center rounded-lg bg-gray-100 dark:bg-gray-800 text-base font-medium text-gray-500 dark:text-gray-400 md:h-24 md:w-24">
                {work.name}
              </div> */}
              <!-- Text Content -->
              <div class="text-left">
                <h3 class="text-md font-medium text-gray-900 dark:text-gray-100">{work.role} at {work.name} <span class="text-xs text-gray-500 dark:text-gray-400">{work.year}</span></h3>
                <p class="mt-0.5 text-xs text-gray-600 dark:text-gray-300">
                  {work.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </section>
    </main>
  </div>
</Layout>
