---
import { TURNSTILE_SITE_KEY } from "astro:env/client";

interface Props {
  onVerify?: (token: string) => void;
  onError?: () => void;
}

const { onVerify, onError } = Astro.props;
---

<div class="cf-turnstile" data-sitekey={TURNSTILE_SITE_KEY}></div>

<script>
  // Declare global types for Turnstile
  declare global {
    interface Window {
      turnstile: {
        render: (
          container: string | HTMLElement,
          options: {
            sitekey: string;
            callback: (token: string) => void;
            "error-callback"?: () => void;
          }
        ) => string;
      };
      onloadTurnstileCallback: () => void;
    }
  }

  // Load Turnstile script
  const script = document.createElement("script");
  script.src = "https://challenges.cloudflare.com/turnstile/v0/api.js";
  script.async = true;
  script.defer = true;
  document.head.appendChild(script);

  // Handle verification
  window.onloadTurnstileCallback = function () {
    const container = document.querySelector(".cf-turnstile");
    const sitekey = container?.getAttribute("data-sitekey");

    if (!sitekey) {
      console.error("Turnstile site key is missing!");
      return;
    }

    window.turnstile.render(".cf-turnstile", {
      sitekey,
      callback: (token: string) => {
        console.log("Turnstile verification successful");
        // Dispatch a custom event that can be listened to
        window.dispatchEvent(
          new CustomEvent("turnstile:verify", { detail: { token } })
        );
      },
      "error-callback": () => {
        console.error("Turnstile error");
        // Dispatch a custom event that can be listened to
        window.dispatchEvent(new CustomEvent("turnstile:error"));
      },
    });
  };
</script>
